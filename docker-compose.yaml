services:
  database:
    container_name: dataContainer
    build:
      context: ./Integrated-DataBase
      dockerfile: Dockerfile
    volumes:
      - mysqldb:/var/lib/mysql
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 2s
      timeout: 2s
      retries: 20
    ports:
      - '3306:3306'
    networks: 
      BE-network:
        ipv4_address: 172.18.0.2
    restart: unless-stopped

  backend:
    container_name: backEndContainer
    build:
      context: ./Integrated-BackEnd
      dockerfile: Dockerfile
    networks: 
      BE-network:
        ipv4_address: 172.18.0.3
      FE-network:
        ipv4_address: 172.19.0.3
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy

  frontendv2:
    container_name: frontEndContainerV2
    build:
      context: ./Integrated-FrontEnd/IntegratedNw2FrontEnd
      dockerfile: Dockerfile
    networks: 
      FE-network:
        ipv4_address: 172.19.0.2
    restart: unless-stopped
    depends_on:
      - backend

  reverse_proxy:
    image: nginx:alpine
    container_name: reverse_proxy
    ports:
      - '80:80'
      - '443:443'
    volumes: 
      - ./ssl:/etc/nginx/ssl
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks: 
      FE-network:
        ipv4_address: 172.19.0.4
    restart: unless-stopped
    depends_on:
      - frontendv2

volumes:
  mysqldb:
  mysqlconfig:

networks:
  BE-network:
    ipam:
      config:
        - subnet: '172.18.0.0/24'
  FE-network:
    ipam:
      config:
        - subnet: '172.19.0.0/24'
